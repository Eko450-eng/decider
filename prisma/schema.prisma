// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        Int      @id @unique @default(autoincrement())
  username  String   @unique @db.VarChar(100)
  role      Int
  password  String
  email     String   @unique
  createdAt DateTime @default(now())

  topics String[]

  questions    Question[]
  push_devices Pushdevices[]
  comments     Comment[]
}

model Question {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(30)
  desc      String   @db.VarChar(100)
  createdAt DateTime @default(now())

  option1 String @db.VarChar(30)
  option2 String @db.VarChar(30)

  votes1 Int[]
  votes2 Int[]

  likes Int[]

  poster   Profile   @relation(fields: [posterId], references: [id])
  posterId Int
  comments Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  message   String   @db.VarChar(200)
  createdAt DateTime @default(now())

  commentor   Profile @relation(fields: [commentorId], references: [id])
  commentorId Int

  thread   Question @relation(fields: [threadId], references: [id])
  threadId Int
}

model Pushdevices {
  id        Int      @id @default(autoincrement())
  device    String   @unique
  createdAt DateTime @default(now())

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
